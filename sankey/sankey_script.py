"""
Sankey Diagram Generator - Optimized for Large Datasets
‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
"""

import pandas as pd
import json
from pathlib import Path
import numpy as np

def create_sankey_from_excel(excel_file, output_file='sankey_output.html', top_n=20):
    """
    ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á Sankey Diagram ‡πÄ‡∏õ‡πá‡∏ô HTML
    
    Parameters:
    -----------
    excel_file : str
        Path ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÑ‡∏ü‡∏•‡πå Excel
    output_file : str
        ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå HTML ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á
    top_n : int
        ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô top items ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á (default: 20)
    """
    
    # ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel
    print(f"üìñ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå: {excel_file}")
    df = pd.read_excel(excel_file)
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
    print("\nüìã ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏û‡∏ö‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå:")
    print(df.columns.tolist())
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    print(f"\nüìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:")
    print(f"   - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß: {len(df):,} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    print(f"   - ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏°: {df['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (PxQ)'].sum():,.0f} ‡∏ö‡∏≤‡∏ó")
    
    # ===== ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà =====
    
    # 1. ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ù‡πà‡∏≤‡∏¢ (‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô)
    provider_receiver_sum = df.groupby(['‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£', '‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'])['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (PxQ)'].sum().reset_index()
    provider_receiver_sum = provider_receiver_sum.sort_values('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (PxQ)', ascending=False)
    
    # 2. ‡∏´‡∏≤ Top Providers ‡πÅ‡∏•‡∏∞ Top Receivers ‡∏ï‡∏≤‡∏°‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤
    top_providers = df.groupby('‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£')['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (PxQ)'].sum().nlargest(top_n).index.tolist()
    top_receivers = df.groupby('‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£')['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (PxQ)'].sum().nlargest(top_n).index.tolist()
    
    # 3. ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Top Items
    filtered_df = provider_receiver_sum[
        (provider_receiver_sum['‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'].isin(top_providers)) |
        (provider_receiver_sum['‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'].isin(top_receivers))
    ]
    
    # 4. ‡∏£‡∏ß‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πá‡∏Å‡πÜ ‡πÄ‡∏õ‡πá‡∏ô "‡∏≠‡∏∑‡πà‡∏ô‡πÜ"
    threshold = filtered_df['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (PxQ)'].sum() * 0.01  # 1% ‡∏Ç‡∏≠‡∏á‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°
    main_items = filtered_df[filtered_df['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (PxQ)'] >= threshold].copy()
    other_items = filtered_df[filtered_df['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (PxQ)'] < threshold].copy()
    
    if len(other_items) > 0:
        # ‡∏£‡∏ß‡∏° items ‡πÄ‡∏•‡πá‡∏Å‡πÜ ‡∏ï‡∏≤‡∏° provider
        for provider in other_items['‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'].unique():
            provider_others = other_items[other_items['‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'] == provider]
            if len(provider_others) > 0:
                other_sum = provider_others['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (PxQ)'].sum()
                main_items = pd.concat([main_items, pd.DataFrame({
                    '‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£': [provider],
                    '‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£': ['‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÜ'],
                    '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (PxQ)': [other_sum]
                })], ignore_index=True)
    
    # 5. ‡∏à‡∏±‡∏î‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö JavaScript
    data_for_provider_view = []
    for _, row in main_items.iterrows():
        data_for_provider_view.append({
            'provider': row['‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'],
            'receiver': row['‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'],
            'value': float(row['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (PxQ)'])
        })
    
    # 6. ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Service View - ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£
    service_groups = {
        'Colocation': ['Co-location', 'Colocation', 'Co location'],
        'Cloud & Compute': ['Cloud', 'Virtual', 'VM', 'Compute'],
        'Network': ['Network', 'LAN', 'WAN', 'Bandwidth', 'Internet'],
        'Data Center': ['Data Center', 'DC', '‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'],
        'DWDM & Transmission': ['DWDM', '‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì', 'Transmission'],
        'Security': ['Security', 'Firewall', 'WAF', 'DDoS'],
        'Backup & DR': ['Backup', 'DR', 'Disaster'],
        'Others': []
    }
    
    # ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£
    df['service_group'] = 'Others'
    for group, keywords in service_groups.items():
        for keyword in keywords:
            mask = df['‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'].str.contains(keyword, case=False, na=False)
            df.loc[mask, 'service_group'] = group
    
    # ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• service view
    service_view_data = df.groupby(['service_group', '‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'])['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (PxQ)'].sum().reset_index()
    service_view_data = service_view_data[service_view_data['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (PxQ)'] > 0]
    service_view_data = service_view_data.nlargest(50, '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (PxQ)')
    
    data_for_service_view = []
    for _, row in service_view_data.iterrows():
        data_for_service_view.append({
            'service': row['service_group'],
            'receiver': row['‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'],
            'value': float(row['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (PxQ)'])
        })
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    total_value = df['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (PxQ)'].sum()
    unique_receivers = df['‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'].nunique()
    unique_providers = df['‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'].nunique()
    unique_services = df['‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'].nunique()
    
    print(f"\nüìä ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•:")
    print(f"   - ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ Top {len(top_providers)} ‡∏à‡∏≤‡∏Å {unique_providers} ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô")
    print(f"   - ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ Top {len(top_receivers)} ‡∏à‡∏≤‡∏Å {unique_receivers} ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô")
    print(f"   - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Links ‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á: {len(main_items)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á HTML content
    html_content = f'''<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sankey Diagram - Transfer Price Analysis</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/d3/7.8.5/d3.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/d3-sankey/0.12.3/d3-sankey.min.js"></script>
    <style>
        * {{
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }}
        
        body {{
            font-family: 'Sarabun', 'Segoe UI', Tahoma, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }}
        
        .container {{
            background: white;
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 20px 60px rgba(0,0,0,0.3);
            max-width: 1600px;
            margin: 0 auto;
        }}
        
        h1 {{
            text-align: center;
            color: #2d3748;
            margin-bottom: 10px;
            font-size: 32px;
            font-weight: bold;
        }}
        
        .subtitle {{
            text-align: center;
            color: #718096;
            margin-bottom: 20px;
            font-size: 14px;
        }}
        
        .controls {{
            display: flex;
            justify-content: center;
            gap: 10px;
            margin-bottom: 30px;
            flex-wrap: wrap;
        }}
        
        .controls button {{
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 25px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
        }}
        
        .controls button:hover {{
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(102, 126, 234, 0.4);
        }}
        
        .controls button.active {{
            background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
        }}
        
        #chart {{
            width: 100%;
            height: 800px;
            position: relative;
            background: #fafafa;
            border-radius: 10px;
            padding: 20px;
        }}
        
        .node rect {{
            cursor: pointer;
            fill-opacity: .95;
            shape-rendering: crispEdges;
            stroke-width: 0;
            transition: fill-opacity 0.3s;
        }}
        
        .node rect:hover {{
            fill-opacity: 1;
        }}
        
        .node text {{
            pointer-events: none;
            font-size: 11px;
            font-weight: 500;
        }}
        
        .link {{
            fill: none;
            stroke-opacity: 0.3;
            transition: stroke-opacity 0.3s;
        }}
        
        .link:hover {{
            stroke-opacity: 0.6;
        }}
        
        .tooltip {{
            position: absolute;
            padding: 12px;
            font-size: 13px;
            background: rgba(0, 0, 0, 0.95);
            color: white;
            border-radius: 8px;
            pointer-events: none;
            opacity: 0;
            transition: opacity 0.3s;
            box-shadow: 0 4px 15px rgba(0,0,0,0.3);
            z-index: 1000;
            max-width: 300px;
        }}
        
        .summary {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-top: 30px;
            padding: 25px;
            background: linear-gradient(135deg, #f6f8fb 0%, #e9ecef 100%);
            border-radius: 15px;
        }}
        
        .summary-item {{
            text-align: center;
            padding: 15px;
            background: white;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
        }}
        
        .summary-label {{
            color: #718096;
            font-size: 12px;
            margin-bottom: 8px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }}
        
        .summary-value {{
            color: #2d3748;
            font-size: 24px;
            font-weight: bold;
        }}
        
        .loading {{
            text-align: center;
            padding: 40px;
            color: #718096;
        }}
        
        .error {{
            background: #fed7d7;
            color: #c53030;
            padding: 15px;
            border-radius: 8px;
            margin: 20px 0;
        }}
        
        .info-box {{
            background: #e6fffa;
            border-left: 4px solid #38b2ac;
            padding: 15px;
            margin: 20px 0;
            border-radius: 5px;
        }}
        
        .filter-info {{
            background: #fef5e7;
            border-left: 4px solid #f39c12;
            padding: 12px;
            margin: 15px 0;
            border-radius: 5px;
            font-size: 13px;
            color: #856404;
        }}
    </style>
</head>
<body>
    <div class="container">
        <h1>üìä Transfer Price Sankey Diagram</h1>
        <div class="subtitle">‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡πÑ‡∏´‡∏•‡∏Ç‡∏≠‡∏á‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô</div>
        
        <div class="filter-info">
            ‚ö†Ô∏è <strong>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:</strong> ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Top {top_n} ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î ‡∏à‡∏≤‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {unique_receivers} ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô 
            ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
        </div>
        
        <div class="controls">
            <button onclick="updateView('provider')" class="active">üè¢ ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£</button>
            <button onclick="updateView('service')">üì¶ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£</button>
            <button onclick="updateView('top_flow')">üîù Top 30 Flows</button>
        </div>
        
        <div id="chart">
            <div class="loading">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</div>
        </div>
        <div class="tooltip"></div>
        
        <div class="summary">
            <div class="summary-item">
                <div class="summary-label">‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</div>
                <div class="summary-value">{total_value:,.0f}</div>
            </div>
            <div class="summary-item">
                <div class="summary-label">‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£</div>
                <div class="summary-value">{unique_providers}</div>
            </div>
            <div class="summary-item">
                <div class="summary-label">‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£</div>
                <div class="summary-value">{unique_receivers}</div>
            </div>
            <div class="summary-item">
                <div class="summary-label">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£</div>
                <div class="summary-value">{unique_services}</div>
            </div>
        </div>
    </div>

    <script>
        // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Provider View
        const providerViewData = {json.dumps(data_for_provider_view, ensure_ascii=False)};
        
        // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Service View  
        const serviceViewData = {json.dumps(data_for_service_view, ensure_ascii=False)};
        
        let currentView = 'provider';
        
        function createSankey(viewType) {{
            console.log('Creating Sankey for view:', viewType);
            
            // Clear chart
            d3.select("#chart").selectAll("*").remove();
            
            let nodes = [];
            let links = [];
            let nodeMap = {{}};
            
            try {{
                if (viewType === 'provider') {{
                    // Provider ‚Üí Receiver View
                    let nodeIndex = 0;
                    
                    // ‡∏™‡∏£‡πâ‡∏≤‡∏á unique nodes
                    providerViewData.forEach(d => {{
                        if (!nodeMap[d.provider]) {{
                            nodeMap[d.provider] = nodeIndex++;
                            nodes.push({{ name: d.provider, type: 'provider' }});
                        }}
                        if (!nodeMap[d.receiver]) {{
                            nodeMap[d.receiver] = nodeIndex++;
                            nodes.push({{ name: d.receiver, type: 'receiver' }});
                        }}
                    }});
                    
                    // ‡∏™‡∏£‡πâ‡∏≤‡∏á links
                    providerViewData.forEach(d => {{
                        links.push({{
                            source: nodeMap[d.provider],
                            target: nodeMap[d.receiver],
                            value: d.value,
                            provider: d.provider,
                            receiver: d.receiver
                        }});
                    }});
                    
                }} else if (viewType === 'service') {{
                    // Service ‚Üí Receiver View
                    let nodeIndex = 0;
                    
                    // ‡∏™‡∏£‡πâ‡∏≤‡∏á unique nodes
                    serviceViewData.forEach(d => {{
                        if (!nodeMap[d.service]) {{
                            nodeMap[d.service] = nodeIndex++;
                            nodes.push({{ name: d.service, type: 'service' }});
                        }}
                        if (!nodeMap[d.receiver]) {{
                            nodeMap[d.receiver] = nodeIndex++;
                            nodes.push({{ name: d.receiver, type: 'receiver' }});
                        }}
                    }});
                    
                    // ‡∏™‡∏£‡πâ‡∏≤‡∏á links
                    serviceViewData.forEach(d => {{
                        links.push({{
                            source: nodeMap[d.service],
                            target: nodeMap[d.receiver],
                            value: d.value,
                            service: d.service,
                            receiver: d.receiver
                        }});
                    }});
                    
                }} else if (viewType === 'top_flow') {{
                    // Top 30 Flows
                    let nodeIndex = 0;
                    
                    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å top 30
                    let topFlows = [...providerViewData].sort((a, b) => b.value - a.value).slice(0, 30);
                    
                    topFlows.forEach(d => {{
                        if (!nodeMap[d.provider]) {{
                            nodeMap[d.provider] = nodeIndex++;
                            nodes.push({{ name: d.provider, type: 'provider' }});
                        }}
                        if (!nodeMap[d.receiver]) {{
                            nodeMap[d.receiver] = nodeIndex++;
                            nodes.push({{ name: d.receiver, type: 'receiver' }});
                        }}
                    }});
                    
                    topFlows.forEach(d => {{
                        links.push({{
                            source: nodeMap[d.provider],
                            target: nodeMap[d.receiver],
                            value: d.value,
                            provider: d.provider,
                            receiver: d.receiver
                        }});
                    }});
                }}
                
                console.log('Nodes:', nodes.length, 'Links:', links.length);
                
                if (nodes.length === 0 || links.length === 0) {{
                    throw new Error('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•');
                }}
                
                // ‡∏™‡∏£‡πâ‡∏≤‡∏á Sankey diagram
                const margin = {{ top: 10, right: 200, bottom: 10, left: 200 }};
                const width = document.getElementById('chart').offsetWidth - margin.left - margin.right;
                const height = 760 - margin.top - margin.bottom;
                
                const svg = d3.select("#chart")
                    .append("svg")
                    .attr("width", width + margin.left + margin.right)
                    .attr("height", height + margin.top + margin.bottom)
                    .append("g")
                    .attr("transform", `translate(${{margin.left}},${{margin.top}})`);
                
                // ‡∏™‡∏£‡πâ‡∏≤‡∏á sankey layout
                const sankey = d3.sankey()
                    .nodeId(d => d.index)
                    .nodeWidth(20)
                    .nodePadding(10)
                    .extent([[0, 0], [width, height]]);
                
                // Apply sankey algorithm
                const graph = sankey({{
                    nodes: nodes.map(d => Object.assign({{}}, d)),
                    links: links.map(d => Object.assign({{}}, d))
                }});
                
                console.log('Graph generated:', graph);
                
                // Color scale
                const color = d3.scaleOrdinal()
                    .domain(['provider', 'service', 'receiver'])
                    .range(['#4299e1', '#48bb78', '#ed8936']);
                
                const nodeColor = d3.scaleOrdinal(d3.schemeSet3);
                
                // Tooltip
                const tooltip = d3.select(".tooltip");
                
                // Draw links
                const link = svg.append("g")
                    .selectAll(".link")
                    .data(graph.links)
                    .enter().append("path")
                    .attr("class", "link")
                    .attr("d", d3.sankeyLinkHorizontal())
                    .style("stroke", d => nodeColor(d.source.name))
                    .style("stroke-width", d => Math.max(1, d.width))
                    .on("mouseover", function(event, d) {{
                        tooltip.style("opacity", 1)
                            .html(`
                                <strong>${{d.source.name}}</strong> ‚Üí <strong>${{d.target.name}}</strong><br/>
                                <span style="color: #ffd700;">üí∞ ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤: ${{d.value.toLocaleString()}} ‡∏ö‡∏≤‡∏ó</span>
                            `)
                            .style("left", (event.pageX + 10) + "px")
                            .style("top", (event.pageY - 28) + "px");
                    }})
                    .on("mouseout", function() {{
                        tooltip.style("opacity", 0);
                    }});
                
                // Draw nodes
                const node = svg.append("g")
                    .selectAll(".node")
                    .data(graph.nodes)
                    .enter().append("g")
                    .attr("class", "node");
                
                node.append("rect")
                    .attr("x", d => d.x0)
                    .attr("y", d => d.y0)
                    .attr("height", d => Math.max(1, d.y1 - d.y0))
                    .attr("width", d => d.x1 - d.x0)
                    .style("fill", d => nodeColor(d.name))
                    .on("mouseover", function(event, d) {{
                        const incoming = d.targetLinks ? d.targetLinks.reduce((sum, l) => sum + l.value, 0) : 0;
                        const outgoing = d.sourceLinks ? d.sourceLinks.reduce((sum, l) => sum + l.value, 0) : 0;
                        
                        let html = `<strong>${{d.name}}</strong><br/>`;
                        if (incoming > 0) html += `üì• ‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤: ${{incoming.toLocaleString()}} ‡∏ö‡∏≤‡∏ó<br/>`;
                        if (outgoing > 0) html += `üì§ ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å: ${{outgoing.toLocaleString()}} ‡∏ö‡∏≤‡∏ó`;
                        
                        tooltip.style("opacity", 1)
                            .html(html)
                            .style("left", (event.pageX + 10) + "px")
                            .style("top", (event.pageY - 28) + "px");
                    }})
                    .on("mouseout", function() {{
                        tooltip.style("opacity", 0);
                    }});
                
                // Add labels
                node.append("text")
                    .attr("x", d => d.x0 < width / 2 ? d.x1 + 6 : d.x0 - 6)
                    .attr("y", d => (d.y1 + d.y0) / 2)
                    .attr("dy", "0.35em")
                    .attr("text-anchor", d => d.x0 < width / 2 ? "start" : "end")
                    .text(d => {{
                        // ‡∏ï‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß
                        const maxLength = 30;
                        return d.name.length > maxLength ? 
                            d.name.substring(0, maxLength) + "..." : d.name;
                    }})
                    .style("font-size", "11px")
                    .style("fill", "#2d3748");
                    
            }} catch (error) {{
                console.error('Error creating Sankey:', error);
                d3.select("#chart")
                    .append("div")
                    .attr("class", "error")
                    .html(`‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${{error.message}}`);
            }}
        }}
        
        function updateView(viewType) {{
            currentView = viewType;
            
            // Update button states
            document.querySelectorAll('.controls button').forEach(btn => {{
                btn.classList.remove('active');
            }});
            event.target.classList.add('active');
            
            createSankey(viewType);
        }}
        
        // Initialize with provider view
        window.addEventListener('DOMContentLoaded', function() {{
            createSankey('provider');
        }});
    </script>
</body>
</html>'''
    
    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå HTML
    with open(output_file, 'w', encoding='utf-8') as f:
        f.write(html_content)
    
    print(f"\n‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Sankey Diagram ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
    print(f"üìÅ ‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏µ‡πà: {output_file}")
    print(f"üåê ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå")
    
    # ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà
    if len(df) > 1000:
        print(f"\nüí° ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î {len(df):,} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£:")
        print(f"   - ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Top {top_n} ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô")
        print(f"   - ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πá‡∏Å‡πÜ ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô '‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÜ'")
        print(f"   - ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π Top ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç parameter: top_n")
    
    return output_file


# ==========================================
# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏£‡∏≠‡∏á: ‡πÉ‡∏ä‡πâ Plotly (‡∏á‡πà‡∏≤‡∏¢‡∏Å‡∏ß‡πà‡∏≤)
# ==========================================

def create_sankey_plotly(excel_file, output_file='sankey_plotly.html', max_items=50):
    """
    ‡∏™‡∏£‡πâ‡∏≤‡∏á Sankey ‡∏î‡πâ‡∏ß‡∏¢ Plotly - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà‡πÑ‡∏î‡πâ‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤
    """
    try:
        import plotly.graph_objects as go
        import plotly.express as px
    except ImportError:
        print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á plotly: pip install plotly")
        return
    
    print(f"üìñ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå: {excel_file}")
    df = pd.read_excel(excel_file)
    
    # ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ù‡πà‡∏≤‡∏¢
    flow_data = df.groupby(['‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£', '‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'])['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (PxQ)'].sum().reset_index()
    flow_data = flow_data.nlargest(max_items, '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (PxQ)')
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á unique nodes
    all_nodes = list(set(flow_data['‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'].unique().tolist() + 
                        flow_data['‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'].unique().tolist()))
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á index mapping
    node_indices = {node: i for i, node in enumerate(all_nodes)}
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á Sankey
    fig = go.Figure(data=[go.Sankey(
        node=dict(
            pad=15,
            thickness=20,
            line=dict(color="black", width=0.5),
            label=[node[:30] + "..." if len(node) > 30 else node for node in all_nodes],
            color=px.colors.qualitative.Alphabet[:len(all_nodes)]
        ),
        link=dict(
            source=[node_indices[provider] for provider in flow_data['‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£']],
            target=[node_indices[receiver] for receiver in flow_data['‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£']],
            value=flow_data['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (PxQ)'].tolist(),
            color='rgba(0,0,0,0.2)'
        )
    )])
    
    fig.update_layout(
        title=f"Transfer Price Flow - Top {max_items} Flows",
        font_size=11,
        height=800,
        margin=dict(t=50, l=50, r=50, b=50)
    )
    
    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå
    fig.write_html(output_file)
    print(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå Plotly: {output_file}")
    
    return output_file


# ==========================================
# Main Function
# ==========================================

if __name__ == "__main__":
    import sys
    
    print("=" * 60)
    print("üéØ Sankey Diagram Generator - Large Dataset Edition")
    print("=" * 60)
    
    if len(sys.argv) > 1:
        excel_file = sys.argv[1]
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå
        if not Path(excel_file).exists():
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå: {excel_file}")
            sys.exit(1)
        
        # ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ
        print("\nüìä ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏™‡∏£‡πâ‡∏≤‡∏á Sankey:")
        print("1. D3.js (Interactive, ‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°)")
        print("2. Plotly (‡∏á‡πà‡∏≤‡∏¢, ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà)")
        
        choice = input("\n‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (1 ‡∏´‡∏£‡∏∑‡∏≠ 2, default=1): ").strip() or "1"
        
        if choice == "2":
            # Check if plotly is installed
            try:
                import plotly
                top_n = input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Top flows ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á (default=50): ").strip()
                top_n = int(top_n) if top_n else 50
                create_sankey_plotly(excel_file, max_items=top_n)
            except ImportError:
                print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á plotly: pip install plotly")
                print("   ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1 ‡πÅ‡∏ó‡∏ô")
        else:
            # D3.js method
            top_n = input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Top ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á (default=20): ").strip()
            top_n = int(top_n) if top_n else 20
            create_sankey_from_excel(excel_file, top_n=top_n)
    else:
        print("\nüìå ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:")
        print("   python script.py your_file.xlsx")
        print("\nüí° ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà (>1000 rows):")
        print("   - ‡πÉ‡∏ä‡πâ Plotly method (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 2)")
        print("   - ‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏£‡∏±‡∏ö top_n ‡πÉ‡∏´‡πâ‡∏ô‡πâ‡∏≠‡∏¢‡∏•‡∏á")