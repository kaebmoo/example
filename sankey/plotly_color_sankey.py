"""
Complete Sankey Diagram Generator - Working Version
‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å features ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á
"""

import pandas as pd
import plotly.graph_objects as go
from pathlib import Path

def create_complete_sankey(excel_file, output_file='complete_sankey.html'):
    """
    Main function - ‡∏™‡∏£‡πâ‡∏≤‡∏á Sankey ‡∏û‡∏£‡πâ‡∏≠‡∏° menu ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    """
    print("=" * 60)
    print("üé® Complete Sankey Diagram Generator")
    print("=" * 60)
    
    # ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå
    print(f"\nüìñ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå: {excel_file}")
    df = pd.read_excel(excel_file)
    
    # ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£
    service_groups = {
        'Cloud & Big Data': ['Cloud', 'NT BIG DATA', 'Data Warehouse'],
        'Security': ['Cyber Security'],
        'Network & Internet': ['DWDM', 'Dark Fiber', 'ISP', 'IX', 'IIG', '‡πÄ‡∏Ñ‡πÄ‡∏ö‡∏¥‡∏•‡πÉ‡∏ï‡πâ‡∏ô‡πâ‡∏≥', 
                               'Broadband', 'Datacom', 'CPE Datacom', 'IP Address'],
        'Communication': ['Conference', 'Contact Center', 'IPPhone', 'SIPTrunk', 
                         'SMS', 'NT Messaging', '‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏†‡∏≤‡∏¢‡πÉ‡∏ô', '1888'],
        'Infrastructure': ['IDC', '‡πÄ‡∏™‡∏≤‡πÇ‡∏ó‡∏£‡∏Ñ‡∏°‡∏ô‡∏≤‡∏Ñ‡∏°', '‡∏ó‡πà‡∏≠‡∏£‡πâ‡∏≠‡∏¢‡∏™‡∏≤‡∏¢', '‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£', '‡πÇ‡∏Ñ‡∏£‡∏á‡∏Ç‡πà‡∏≤‡∏¢', 
                          'Fixed Line', 'Mobile', '‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô'],
        'Software & Apps': ['Adobe', 'Microsoft Office', 'Application', 'Software',
                           'NT Form', 'IM Web', 'e-Tax', 'Web', 'SCOMS'],
        'IT Services': ['Helpdesk', 'Managed Service', 'NOC', 'server'],
        'Billing & Finance': ['Billing', 'Special Bill', 'Debt', 'Bill Payment', 
                             'e-Service', '‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏Ñ‡πà‡∏≤', '‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ'],
        'Professional Services': ['MA', '‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á', '‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£', '‡∏Å‡∏é‡∏´‡∏°‡∏≤‡∏¢', 
                                 '‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏Å‡∏£', '‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏£‡∏∞‡∏ö‡∏ö', '‡∏™‡∏±‡∏ç‡∏ç‡∏≤']
    }
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏° service_group column
    df['service_group'] = 'Others'
    for group, keywords in service_groups.items():
        for keyword in keywords:
            mask = df['‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'].str.contains(keyword, case=False, na=False)
            df.loc[mask, 'service_group'] = group
    
    # Color schemes
    color_schemes = {
        'service': {
            'Cloud & Big Data': '#8b5cf6',
            'Security': '#ef4444',
            'Network & Internet': '#06b6d4',
            'Communication': '#10b981',
            'Infrastructure': '#f97316',
            'Software & Apps': '#ec4899',
            'IT Services': '#6366f1',
            'Billing & Finance': '#eab308',
            'Professional Services': '#64748b',
            'Others': '#9ca3af'
        }
    }
    
    # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå dual roles
    providers = set(df['‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'].unique())
    receivers = set(df['‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'].unique())
    dual_role_depts = providers & receivers
    
    print(f"\nüìä ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:")
    print(f"   - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß: {len(df):,} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    print(f"   - ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏°: {df['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (PxQ)'].sum():,.0f} ‡∏ö‡∏≤‡∏ó")
    print(f"   - ‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£: {len(providers)} ‡∏ù‡πà‡∏≤‡∏¢")
    print(f"   - ‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£: {len(receivers)} ‡∏ù‡πà‡∏≤‡∏¢")
    print(f"   - ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô Dual Role: {len(dual_role_depts)} ‡∏ù‡πà‡∏≤‡∏¢")
    
    print("\nüéØ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•:")
    print("1. Department View: ‡∏ù‡πà‡∏≤‡∏¢‡πÉ‡∏´‡πâ ‚Üí ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ ‚Üí ‡∏ù‡πà‡∏≤‡∏¢‡∏£‡∏±‡∏ö")
    print("2. Service Detail: ‡∏ù‡πà‡∏≤‡∏¢‡πÉ‡∏´‡πâ ‚Üí ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‚Üí ‡∏ù‡πà‡∏≤‡∏¢‡∏£‡∏±‡∏ö")
    print("3. High Level: ‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡πâ ‚Üí ‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏±‡∏ö")
    print("4. Dual Role: ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏±‡πâ‡∏á‡πÉ‡∏´‡πâ‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£")
    print("5. Service Network: ‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ ‚Üí ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ ‚Üí ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö (‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏î‡πâ‡∏ß‡∏¢) ‚Üí ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏ï‡πà‡∏≠")
    
    choice = input("\n‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (1-5, default=1): ").strip() or "1"
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    if choice == "1":
        fig = create_department_view(df, service_groups, color_schemes, dual_role_depts)
    elif choice == "2":
        fig = create_service_detail_view(df, color_schemes, dual_role_depts)
    elif choice == "3":
        fig = create_high_level_view(df, dual_role_depts)
    elif choice == "4":
        fig = create_dual_role_view(df, service_groups, color_schemes, dual_role_depts)
    else:
        fig = create_service_network_view(df, service_groups, color_schemes, dual_role_depts)
    
    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå
    if fig:
        fig.write_html(output_file)
        print(f"\n‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {output_file}")
        print("üåê ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô browser ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå")
    
    return output_file

def hex_to_rgba(hex_color, alpha):
    """‡πÅ‡∏õ‡∏•‡∏á hex ‡πÄ‡∏õ‡πá‡∏ô rgba"""
    hex_color = hex_color.lstrip('#')
    r = int(hex_color[0:2], 16)
    g = int(hex_color[2:4], 16)
    b = int(hex_color[4:6], 16)
    return f'rgba({r}, {g}, {b}, {alpha})'

def create_department_view(df, service_groups, color_schemes, dual_role_depts):
    """View 1: ‡∏ù‡πà‡∏≤‡∏¢ ‚Üí ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ ‚Üí ‡∏ù‡πà‡∏≤‡∏¢"""
    print("\nüîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á Department View...")
    
    # Filter top items
    top_providers = df.groupby('‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£')['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (PxQ)'].sum().nlargest(25).index
    top_receivers = df.groupby('‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£')['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (PxQ)'].sum().nlargest(40).index
    
    filtered_df = df[
        df['‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'].isin(top_providers) & 
        df['‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'].isin(top_receivers)
    ].copy()
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á nodes
    all_nodes = []
    all_colors = []
    node_dict = {}
    node_counter = 0
    
    # Layer 1: Providers
    for provider in filtered_df['‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'].unique():
        node_name = f"[‡πÉ‡∏´‡πâ] {provider[:35]}"
        node_dict[node_name] = node_counter
        all_nodes.append(node_name)
        all_colors.append('#2563eb')
        node_counter += 1
    
    # Layer 2: Service Groups
    for group in filtered_df['service_group'].unique():
        node_name = f"üì¶ {group}"
        node_dict[node_name] = node_counter
        all_nodes.append(node_name)
        all_colors.append(color_schemes['service'].get(group, '#9ca3af'))
        node_counter += 1
    
    # Layer 3: Receivers
    for receiver in filtered_df['‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'].unique():
        node_name = f"[‡∏£‡∏±‡∏ö] {receiver[:35]}"
        node_dict[node_name] = node_counter
        all_nodes.append(node_name)
        color = '#9333ea' if receiver in dual_role_depts else '#10b981'
        all_colors.append(color)
        node_counter += 1
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á links
    all_links = []
    
    # Provider -> Service Group
    link1 = filtered_df.groupby(['‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£', 'service_group'])['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (PxQ)'].sum().reset_index()
    for _, row in link1.iterrows():
        all_links.append({
            'source': node_dict[f"[‡πÉ‡∏´‡πâ] {row['‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'][:35]}"],
            'target': node_dict[f"üì¶ {row['service_group']}"],
            'value': row['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (PxQ)']
        })
    
    # Service Group -> Receiver
    link2 = filtered_df.groupby(['service_group', '‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'])['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (PxQ)'].sum().reset_index()
    for _, row in link2.iterrows():
        all_links.append({
            'source': node_dict[f"üì¶ {row['service_group']}"],
            'target': node_dict[f"[‡∏£‡∏±‡∏ö] {row['‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'][:35]}"],
            'value': row['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (PxQ)']
        })
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á figure
    fig = go.Figure(data=[go.Sankey(
        node=dict(
            pad=15,
            thickness=20,
            line=dict(color="white", width=1),
            label=all_nodes,
            color=all_colors,
            hovertemplate='%{label}<br>‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤: %{value:,.0f} ‡∏ö‡∏≤‡∏ó<extra></extra>'
        ),
        link=dict(
            source=[link['source'] for link in all_links],
            target=[link['target'] for link in all_links],
            value=[link['value'] for link in all_links],
            color=['rgba(0,0,0,0.2)' for _ in all_links],
            hovertemplate='%{source.label} ‚Üí %{target.label}<br>‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤: %{value:,.0f} ‡∏ö‡∏≤‡∏ó<extra></extra>'
        )
    )])
    
    fig.update_layout(
        title="Department View: ‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ ‚Üí ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ ‚Üí ‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö<br><sub>üîµ ‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ | üé® ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ | üü¢ ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö | üü£ Dual Role</sub>",
        font=dict(size=11),
        height=900,
        margin=dict(t=100, l=30, r=30, b=30)
    )
    
    return fig

def create_service_detail_view(df, color_schemes, dual_role_depts):
    """View 2: ‡πÅ‡∏™‡∏î‡∏á‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
    print("\nüîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á Service Detail View...")
    
    # Filter top items
    top_providers = df.groupby('‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£')['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (PxQ)'].sum().nlargest(20).index
    top_services = df.groupby('‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£')['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (PxQ)'].sum().nlargest(30).index
    top_receivers = df.groupby('‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£')['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (PxQ)'].sum().nlargest(30).index
    
    filtered_df = df[
        df['‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'].isin(top_providers) & 
        df['‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'].isin(top_services) &
        df['‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'].isin(top_receivers)
    ].copy()
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á nodes
    all_nodes = []
    all_colors = []
    node_dict = {}
    node_counter = 0
    
    # Providers
    for provider in filtered_df['‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'].unique():
        node_name = f"[‡πÉ‡∏´‡πâ] {provider[:30]}"
        node_dict[node_name] = node_counter
        all_nodes.append(node_name)
        all_colors.append('#3b82f6')
        node_counter += 1
    
    # Services
    for service in filtered_df['‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'].unique():
        node_name = f"üì¶ {service[:30]}"
        node_dict[node_name] = node_counter
        all_nodes.append(node_name)
        service_group = filtered_df[filtered_df['‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'] == service]['service_group'].iloc[0]
        all_colors.append(color_schemes['service'].get(service_group, '#9ca3af'))
        node_counter += 1
    
    # Receivers
    for receiver in filtered_df['‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'].unique():
        node_name = f"[‡∏£‡∏±‡∏ö] {receiver[:30]}"
        node_dict[node_name] = node_counter
        all_nodes.append(node_name)
        color = '#9333ea' if receiver in dual_role_depts else '#10b981'
        all_colors.append(color)
        node_counter += 1
    
    # Links
    all_links = []
    
    # Provider -> Service
    link1 = filtered_df.groupby(['‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£', '‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'])['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (PxQ)'].sum().reset_index()
    for _, row in link1.iterrows():
        all_links.append({
            'source': node_dict[f"[‡πÉ‡∏´‡πâ] {row['‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'][:30]}"],
            'target': node_dict[f"üì¶ {row['‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'][:30]}"],
            'value': row['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (PxQ)']
        })
    
    # Service -> Receiver
    link2 = filtered_df.groupby(['‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£', '‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'])['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (PxQ)'].sum().reset_index()
    for _, row in link2.iterrows():
        all_links.append({
            'source': node_dict[f"üì¶ {row['‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'][:30]}"],
            'target': node_dict[f"[‡∏£‡∏±‡∏ö] {row['‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'][:30]}"],
            'value': row['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (PxQ)']
        })
    
    fig = go.Figure(data=[go.Sankey(
        node=dict(
            pad=10,
            thickness=15,
            line=dict(color="white", width=0.5),
            label=all_nodes,
            color=all_colors
        ),
        link=dict(
            source=[link['source'] for link in all_links],
            target=[link['target'] for link in all_links],
            value=[link['value'] for link in all_links],
            color=['rgba(0,0,0,0.15)' for _ in all_links]
        )
    )])
    
    fig.update_layout(
        title="Service Detail View: ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
        height=900
    )
    
    return fig

def create_high_level_view(df, dual_role_depts):
    """View 3: ‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô ‚Üí ‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô"""
    print("\nüîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á High Level View...")
    
    flow_data = df.groupby(['‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£', '‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'])['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (PxQ)'].sum().reset_index()
    flow_data = flow_data[flow_data['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (PxQ)'] > 0]
    
    all_nodes = []
    all_colors = []
    node_dict = {}
    node_counter = 0
    
    # Providers
    for provider in flow_data['‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'].unique():
        node_name = f"[‡πÉ‡∏´‡πâ] {provider}"
        node_dict[f"p_{provider}"] = node_counter
        all_nodes.append(node_name)
        all_colors.append('#2563eb')
        node_counter += 1
    
    # Receivers
    for receiver in flow_data['‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'].unique():
        node_name = f"[‡∏£‡∏±‡∏ö] {receiver}"
        node_dict[f"r_{receiver}"] = node_counter
        all_nodes.append(node_name)
        all_colors.append('#10b981')
        node_counter += 1
    
    # Links
    all_links = []
    for _, row in flow_data.iterrows():
        all_links.append({
            'source': node_dict[f"p_{row['‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£']}"],
            'target': node_dict[f"r_{row['‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£']}"],
            'value': row['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (PxQ)']
        })
    
    fig = go.Figure(data=[go.Sankey(
        node=dict(
            pad=20,
            thickness=30,
            line=dict(color="white", width=2),
            label=all_nodes,
            color=all_colors
        ),
        link=dict(
            source=[link['source'] for link in all_links],
            target=[link['target'] for link in all_links],
            value=[link['value'] for link in all_links],
            color=['rgba(0,0,0,0.2)' for _ in all_links]
        )
    )])
    
    fig.update_layout(
        title="High Level View: ‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô ‚Üí ‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô",
        height=700
    )
    
    return fig

def create_dual_role_view(df, service_groups, color_schemes, dual_role_depts):
    """View 4: Dual Role Departments"""
    print("\nüîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á Dual Role View...")
    
    if not dual_role_depts:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô Dual Role")
        return None
    
    # Filter for dual role
    dual_df = df[
        (df['‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'].isin(dual_role_depts)) |
        (df['‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'].isin(dual_role_depts))
    ].copy()
    
    all_nodes = []
    all_colors = []
    node_dict = {}
    node_counter = 0
    
    # As Providers
    for dept in dual_role_depts:
        if dept in dual_df['‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'].values:
            node_name = f"[‡πÉ‡∏´‡πâ] {dept[:30]}"
            node_dict[f"p_{dept}"] = node_counter
            all_nodes.append(node_name)
            all_colors.append('#3b82f6')
            node_counter += 1
    
    # Services
    for group in dual_df['service_group'].unique():
        node_name = f"üì¶ {group}"
        node_dict[group] = node_counter
        all_nodes.append(node_name)
        all_colors.append(color_schemes['service'].get(group, '#9ca3af'))
        node_counter += 1
    
    # As Receivers
    for dept in dual_role_depts:
        if dept in dual_df['‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'].values:
            node_name = f"[‡∏£‡∏±‡∏ö] {dept[:30]}"
            node_dict[f"r_{dept}"] = node_counter
            all_nodes.append(node_name)
            all_colors.append('#9333ea')
            node_counter += 1
    
    # Links
    all_links = []
    
    # Provider -> Service
    link1 = dual_df[dual_df['‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'].isin(dual_role_depts)].groupby(
        ['‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£', 'service_group'])['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (PxQ)'].sum().reset_index()
    
    for _, row in link1.iterrows():
        if f"p_{row['‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£']}" in node_dict:
            all_links.append({
                'source': node_dict[f"p_{row['‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£']}"],
                'target': node_dict[row['service_group']],
                'value': row['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (PxQ)']
            })
    
    # Service -> Receiver
    link2 = dual_df[dual_df['‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'].isin(dual_role_depts)].groupby(
        ['service_group', '‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'])['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (PxQ)'].sum().reset_index()
    
    for _, row in link2.iterrows():
        if f"r_{row['‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£']}" in node_dict:
            all_links.append({
                'source': node_dict[row['service_group']],
                'target': node_dict[f"r_{row['‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£']}"],
                'value': row['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (PxQ)']
            })
    
    fig = go.Figure(data=[go.Sankey(
        node=dict(
            pad=15,
            thickness=20,
            line=dict(color="white", width=1),
            label=all_nodes,
            color=all_colors
        ),
        link=dict(
            source=[link['source'] for link in all_links],
            target=[link['target'] for link in all_links],
            value=[link['value'] for link in all_links],
            color=['rgba(147, 51, 234, 0.2)' for _ in all_links]
        )
    )])
    
    fig.update_layout(
        title="Dual Role Departments<br><sub>‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡πÅ‡∏•‡∏∞‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£</sub>",
        height=800
    )
    
    return fig

def create_service_network_view(df, service_groups, color_schemes, dual_role_depts):
    """View 5: Service Network"""
    print("\nüîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á Service Network View...")
    
    # Focus on top flows
    top_flows = df.nlargest(100, '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (PxQ)')
    
    all_nodes = []
    all_colors = []
    node_dict = {}
    node_counter = 0
    
    # Layer 1: Providers
    providers = top_flows['‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'].unique()[:15]
    for provider in providers:
        node_name = f"[P] {provider[:25]}"
        node_dict[f"p_{provider}"] = node_counter
        all_nodes.append(node_name)
        all_colors.append('#2563eb')
        node_counter += 1
    
    # Layer 2: Services from providers
    services = top_flows['‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'].unique()[:20]
    for service in services:
        node_name = f"[S] {service[:25]}"
        node_dict[f"s_{service}"] = node_counter
        all_nodes.append(node_name)
        service_group = top_flows[top_flows['‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'] == service]['service_group'].iloc[0]
        all_colors.append(color_schemes['service'].get(service_group, '#9ca3af'))
        node_counter += 1
    
    # Layer 3: Receivers
    receivers = top_flows['‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'].unique()[:20]
    for receiver in receivers:
        node_name = f"[R] {receiver[:25]}"
        node_dict[f"r_{receiver}"] = node_counter
        all_nodes.append(node_name)
        color = '#9333ea' if receiver in dual_role_depts else '#10b981'
        all_colors.append(color)
        node_counter += 1
    
    # Layer 4: Services from dual role receivers
    dual_receivers = [r for r in receivers if r in dual_role_depts]
    if dual_receivers:
        dual_services = df[df['‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'].isin(dual_receivers)]['‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'].unique()[:10]
        for service in dual_services:
            node_name = f"[S2] {service[:25]}"
            if f"s2_{service}" not in node_dict:
                node_dict[f"s2_{service}"] = node_counter
                all_nodes.append(node_name)
                all_colors.append('#fbbf24')
                node_counter += 1
    
    # Links
    all_links = []
    
    # P -> S
    for _, row in top_flows.iterrows():
        if f"p_{row['‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£']}" in node_dict and f"s_{row['‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£']}" in node_dict:
            all_links.append({
                'source': node_dict[f"p_{row['‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£']}"],
                'target': node_dict[f"s_{row['‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£']}"],
                'value': row['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (PxQ)']
            })
    
    # S -> R
    for _, row in top_flows.iterrows():
        if f"s_{row['‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£']}" in node_dict and f"r_{row['‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£']}" in node_dict:
            all_links.append({
                'source': node_dict[f"s_{row['‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£']}"],
                'target': node_dict[f"r_{row['‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£']}"],
                'value': row['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (PxQ)']
            })
    
    # R -> S2 (for dual role)
    if dual_receivers:
        for receiver in dual_receivers:
            receiver_services = df[df['‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'] == receiver].groupby('‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£')['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (PxQ)'].sum().nlargest(5)
            for service, value in receiver_services.items():
                if f"r_{receiver}" in node_dict and f"s2_{service}" in node_dict:
                    all_links.append({
                        'source': node_dict[f"r_{receiver}"],
                        'target': node_dict[f"s2_{service}"],
                        'value': value
                    })
    
    fig = go.Figure(data=[go.Sankey(
        node=dict(
            pad=15,
            thickness=18,
            line=dict(color="white", width=1),
            label=all_nodes,
            color=all_colors
        ),
        link=dict(
            source=[link['source'] for link in all_links],
            target=[link['target'] for link in all_links],
            value=[link['value'] for link in all_links],
            color=['rgba(0,0,0,0.15)' for _ in all_links]
        )
    )])
    
    fig.update_layout(
        title="Service Network View<br><sub>‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏´‡∏•‡∏≤‡∏¢‡∏ä‡∏±‡πâ‡∏ô</sub>",
        height=900
    )
    
    return fig

# Main
if __name__ == "__main__":
    import sys
    
    if len(sys.argv) > 1:
        excel_file = sys.argv[1]
        if not Path(excel_file).exists():
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå: {excel_file}")
            sys.exit(1)
        
        create_complete_sankey(excel_file)
    else:
        print("\nüìå ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ: python script.py your_excel_file.xlsx")