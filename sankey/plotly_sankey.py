"""
Multi-layer Sankey Diagram with Plotly
‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÑ‡∏´‡∏•‡πÅ‡∏ö‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏∞‡∏î‡∏±‡∏ö: ‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô ‚Üí ‡∏ù‡πà‡∏≤‡∏¢ ‚Üí ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ ‚Üí ‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö ‚Üí ‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö
"""

import pandas as pd
import plotly.graph_objects as go
import plotly.express as px
from pathlib import Path
import numpy as np

def create_multilayer_sankey(excel_file, output_file='multilayer_sankey.html'):
    """
    ‡∏™‡∏£‡πâ‡∏≤‡∏á Multi-layer Sankey Diagram ‡∏î‡πâ‡∏ß‡∏¢ Plotly
    ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏∏‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö: ‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô ‚Üí ‡∏ù‡πà‡∏≤‡∏¢ ‚Üí ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ ‚Üí ‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö ‚Üí ‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö
    """
    
    print("=" * 60)
    print("üìä Multi-layer Sankey Diagram Generator")
    print("=" * 60)
    
    # ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå
    print(f"\nüìñ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå: {excel_file}")
    df = pd.read_excel(excel_file)
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ
    print("\nüìã ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:")
    print(f"   - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß: {len(df):,} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    print(f"   - ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏°: {df['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (PxQ)'].sum():,.0f} ‡∏ö‡∏≤‡∏ó")
    print(f"   - ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£: {df['‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'].nunique()} ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó")
    print(f"   - ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏¢‡πà‡∏≠‡∏¢: {df['‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏¢‡πà‡∏≠‡∏¢'].nunique()} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    print(f"   - ‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£: {df['‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'].nunique()} ‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô")
    print(f"   - ‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£: {df['‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'].nunique()} ‡∏ù‡πà‡∏≤‡∏¢")
    print(f"   - ‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£: {df['‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'].nunique()} ‡∏ù‡πà‡∏≤‡∏¢")
    print(f"   - ‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£: {df['‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'].nunique()} ‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô")
    
    # ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    print("\nüéØ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•:")
    print("1. Full Flow: ‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡πâ ‚Üí ‡∏ù‡πà‡∏≤‡∏¢‡πÉ‡∏´‡πâ ‚Üí ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ ‚Üí ‡∏ù‡πà‡∏≤‡∏¢‡∏£‡∏±‡∏ö ‚Üí ‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏±‡∏ö")
    print("2. Department Focus: ‡∏ù‡πà‡∏≤‡∏¢‡πÉ‡∏´‡πâ ‚Üí ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ ‚Üí ‡∏ù‡πà‡∏≤‡∏¢‡∏£‡∏±‡∏ö")
    print("3. Service Focus: ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ ‚Üí ‡∏ù‡πà‡∏≤‡∏¢‡∏£‡∏±‡∏ö (grouped by service)")
    print("4. High Level: ‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡πâ ‚Üí ‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏±‡∏ö")
    print("5. Custom: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏≠‡∏á")
    
    choice = input("\n‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (1-5, default=2): ").strip() or "2"
    
    if choice == "1":
        fig = create_full_flow_sankey(df)
    elif choice == "2":
        fig = create_department_sankey(df)
    elif choice == "3":
        fig = create_service_focus_sankey(df)
    elif choice == "4":
        fig = create_high_level_sankey(df)
    else:
        fig = create_custom_sankey(df)
    
    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå
    fig.write_html(output_file)
    print(f"\n‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {output_file}")
    print("üåê ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô browser ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå")
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü
    fig.show()
    
    return output_file


def create_full_flow_sankey(df):
    """
    Full Flow: ‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡πâ ‚Üí ‡∏ù‡πà‡∏≤‡∏¢‡πÉ‡∏´‡πâ ‚Üí ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ ‚Üí ‡∏ù‡πà‡∏≤‡∏¢‡∏£‡∏±‡∏ö ‚Üí ‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏±‡∏ö
    """
    print("\nüîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á Full Flow Sankey...")
    
    all_nodes = []
    all_links = []
    node_dict = {}
    node_counter = 0
    
    # Layer 1: ‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ (unique with prefix)
    provider_lines = df['‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'].unique()
    for line in provider_lines:
        node_name = f"[‡πÉ‡∏´‡πâ] {line}"
        node_dict[node_name] = node_counter
        all_nodes.append(node_name)
        node_counter += 1
    
    # Layer 2: ‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£
    provider_depts = df['‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'].unique()
    for dept in provider_depts:
        node_name = f"‡∏ù‡πà‡∏≤‡∏¢: {dept[:30]}"
        node_dict[node_name] = node_counter
        all_nodes.append(node_name)
        node_counter += 1
    
    # Layer 3: ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ (grouped)
    services = df['‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'].unique()
    # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ñ‡πâ‡∏≤‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
    if len(services) > 30:
        # ‡πÄ‡∏≠‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞ top 30 services by value
        top_services = df.groupby('‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£')['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (PxQ)'].sum().nlargest(30).index.tolist()
        services = top_services
        # ‡∏£‡∏ß‡∏°‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏≠‡∏∑‡πà‡∏ô‡πÜ
        df.loc[~df['‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'].isin(services), '‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'] = '‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏≠‡∏∑‡πà‡∏ô‡πÜ'
        services = df['‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'].unique()
    
    for service in services:
        node_name = f"üì¶ {service[:25]}"
        node_dict[node_name] = node_counter
        all_nodes.append(node_name)
        node_counter += 1
    
    # Layer 4: ‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ (top 50)
    receiver_depts = df.groupby('‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£')['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (PxQ)'].sum().nlargest(50).index.tolist()
    df.loc[~df['‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'].isin(receiver_depts), '‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'] = '‡∏ù‡πà‡∏≤‡∏¢‡∏≠‡∏∑‡πà‡∏ô‡πÜ'
    receiver_depts = df['‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'].unique()
    
    for dept in receiver_depts:
        node_name = f"‡∏£‡∏±‡∏ö: {dept[:30]}"
        node_dict[node_name] = node_counter
        all_nodes.append(node_name)
        node_counter += 1
    
    # Layer 5: ‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£
    receiver_lines = df['‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'].unique()
    for line in receiver_lines:
        node_name = f"[‡∏£‡∏±‡∏ö] {line}"
        node_dict[node_name] = node_counter
        all_nodes.append(node_name)
        node_counter += 1
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á Links
    # Link 1: ‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡πâ ‚Üí ‡∏ù‡πà‡∏≤‡∏¢‡πÉ‡∏´‡πâ
    link1 = df.groupby(['‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£', '‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'])['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (PxQ)'].sum().reset_index()
    for _, row in link1.iterrows():
        all_links.append({
            'source': node_dict[f"[‡πÉ‡∏´‡πâ] {row['‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£']}"],
            'target': node_dict[f"‡∏ù‡πà‡∏≤‡∏¢: {row['‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'][:30]}"],
            'value': row['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (PxQ)']
        })
    
    # Link 2: ‡∏ù‡πà‡∏≤‡∏¢‡πÉ‡∏´‡πâ ‚Üí ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£
    link2 = df.groupby(['‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£', '‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'])['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (PxQ)'].sum().reset_index()
    for _, row in link2.iterrows():
        all_links.append({
            'source': node_dict[f"‡∏ù‡πà‡∏≤‡∏¢: {row['‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'][:30]}"],
            'target': node_dict[f"üì¶ {row['‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'][:25]}"],
            'value': row['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (PxQ)']
        })
    
    # Link 3: ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ ‚Üí ‡∏ù‡πà‡∏≤‡∏¢‡∏£‡∏±‡∏ö
    link3 = df.groupby(['‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£', '‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'])['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (PxQ)'].sum().reset_index()
    for _, row in link3.iterrows():
        all_links.append({
            'source': node_dict[f"üì¶ {row['‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'][:25]}"],
            'target': node_dict[f"‡∏£‡∏±‡∏ö: {row['‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'][:30]}"],
            'value': row['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (PxQ)']
        })
    
    # Link 4: ‡∏ù‡πà‡∏≤‡∏¢‡∏£‡∏±‡∏ö ‚Üí ‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏±‡∏ö
    link4 = df.groupby(['‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£', '‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'])['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (PxQ)'].sum().reset_index()
    for _, row in link4.iterrows():
        all_links.append({
            'source': node_dict[f"‡∏£‡∏±‡∏ö: {row['‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'][:30]}"],
            'target': node_dict[f"[‡∏£‡∏±‡∏ö] {row['‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£']}"],
            'value': row['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (PxQ)']
        })
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á Plotly Sankey
    fig = go.Figure(data=[go.Sankey(
        node=dict(
            pad=15,
            thickness=20,
            line=dict(color="black", width=0.5),
            label=all_nodes,
            color=px.colors.qualitative.Plotly * 10,  # repeat colors
            hovertemplate='%{label}<br>Total: %{value:,.0f} ‡∏ö‡∏≤‡∏ó<extra></extra>'
        ),
        link=dict(
            source=[link['source'] for link in all_links],
            target=[link['target'] for link in all_links],
            value=[link['value'] for link in all_links],
            hovertemplate='%{source.label} ‚Üí %{target.label}<br>Value: %{value:,.0f} ‡∏ö‡∏≤‡∏ó<extra></extra>'
        )
    )])
    
    fig.update_layout(
        title="Full Flow Sankey: ‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô ‚Üí ‡∏ù‡πà‡∏≤‡∏¢ ‚Üí ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ ‚Üí ‡∏ù‡πà‡∏≤‡∏¢‡∏£‡∏±‡∏ö ‚Üí ‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏±‡∏ö",
        font_size=10,
        height=900,
        margin=dict(t=50, l=20, r=20, b=20)
    )
    
    return fig


def create_department_sankey(df):
    """
    Department Focus: ‡∏ù‡πà‡∏≤‡∏¢‡πÉ‡∏´‡πâ ‚Üí ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ ‚Üí ‡∏ù‡πà‡∏≤‡∏¢‡∏£‡∏±‡∏ö
    """
    print("\nüîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á Department Focus Sankey...")
    
    all_nodes = []
    all_links = []
    node_dict = {}
    node_counter = 0
    
    # ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ top departments ‡πÅ‡∏•‡∏∞ services
    top_provider_depts = df.groupby('‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£')['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (PxQ)'].sum().nlargest(30).index.tolist()
    top_services = df.groupby('‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£')['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (PxQ)'].sum().nlargest(40).index.tolist()
    top_receiver_depts = df.groupby('‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£')['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (PxQ)'].sum().nlargest(40).index.tolist()
    
    # Filter dataframe
    filtered_df = df[
        (df['‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'].isin(top_provider_depts)) &
        (df['‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'].isin(top_services)) &
        (df['‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'].isin(top_receiver_depts))
    ].copy()
    
    # Layer 1: ‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£
    for dept in filtered_df['‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'].unique():
        node_name = f"üè¢ {dept[:40]}"
        node_dict[node_name] = node_counter
        all_nodes.append(node_name)
        node_counter += 1
    
    # Layer 2: ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£
    for service in filtered_df['‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'].unique():
        node_name = f"üì¶ {service[:35]}"
        node_dict[node_name] = node_counter
        all_nodes.append(node_name)
        node_counter += 1
    
    # Layer 3: ‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£
    for dept in filtered_df['‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'].unique():
        node_name = f"üì• {dept[:40]}"
        node_dict[node_name] = node_counter
        all_nodes.append(node_name)
        node_counter += 1
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á Links
    # Link 1: ‡∏ù‡πà‡∏≤‡∏¢‡πÉ‡∏´‡πâ ‚Üí ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£
    link1 = filtered_df.groupby(['‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£', '‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'])['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (PxQ)'].sum().reset_index()
    for _, row in link1.iterrows():
        all_links.append({
            'source': node_dict[f"üè¢ {row['‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'][:40]}"],
            'target': node_dict[f"üì¶ {row['‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'][:35]}"],
            'value': row['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (PxQ)']
        })
    
    # Link 2: ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ ‚Üí ‡∏ù‡πà‡∏≤‡∏¢‡∏£‡∏±‡∏ö
    link2 = filtered_df.groupby(['‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£', '‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'])['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (PxQ)'].sum().reset_index()
    for _, row in link2.iterrows():
        all_links.append({
            'source': node_dict[f"üì¶ {row['‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'][:35]}"],
            'target': node_dict[f"üì• {row['‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'][:40]}"],
            'value': row['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (PxQ)']
        })
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á color palette
    colors = px.colors.qualitative.Set3 + px.colors.qualitative.Pastel + px.colors.qualitative.Bold
    node_colors = []
    for i, node in enumerate(all_nodes):
        if node.startswith('üè¢'):
            node_colors.append('#3498db')  # Blue for providers
        elif node.startswith('üì¶'):
            node_colors.append('#2ecc71')  # Green for services
        else:
            node_colors.append('#e74c3c')  # Red for receivers
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á Plotly Sankey
    fig = go.Figure(data=[go.Sankey(
        arrangement='snap',
        node=dict(
            pad=10,
            thickness=15,
            line=dict(color="black", width=0.5),
            label=all_nodes,
            color=node_colors,
            hovertemplate='%{label}<br>Total: %{value:,.0f} ‡∏ö‡∏≤‡∏ó<extra></extra>'
        ),
        link=dict(
            source=[link['source'] for link in all_links],
            target=[link['target'] for link in all_links],
            value=[link['value'] for link in all_links],
            color='rgba(0,0,0,0.2)',
            hovertemplate='%{source.label} ‚Üí %{target.label}<br>Value: %{value:,.0f} ‡∏ö‡∏≤‡∏ó<extra></extra>'
        )
    )])
    
    fig.update_layout(
        title={
            'text': "Department & Service Flow Analysis<br><sub>‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ ‚Üí ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ ‚Üí ‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£</sub>",
            'x': 0.5,
            'xanchor': 'center'
        },
        font_size=11,
        height=1000,
        margin=dict(t=80, l=20, r=20, b=20),
        paper_bgcolor='#f8f9fa',
        plot_bgcolor='white'
    )
    
    return fig


def create_service_focus_sankey(df):
    """
    Service Focus: ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ ‚Üí ‡∏ù‡πà‡∏≤‡∏¢‡∏£‡∏±‡∏ö (grouped by service category)
    """
    print("\nüîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á Service Focus Sankey...")
    
    # ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£
    service_categories = {
        'Cloud & Virtual': ['Cloud', 'Virtual', 'VM', 'VPS', 'Container'],
        'Network & Connectivity': ['Network', 'LAN', 'WAN', 'Internet', 'MPLS', 'VPN'],
        'Data Center': ['Colocation', 'Co-location', 'Data Center', 'DC', 'Rack'],
        'Transmission': ['DWDM', '‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì', 'Transmission', 'Fiber'],
        'Security': ['Security', 'Firewall', 'WAF', 'DDoS', 'SOC'],
        'Storage & Backup': ['Storage', 'Backup', 'DR', 'Disaster', 'Archive'],
        'Application': ['Application', 'Software', 'License', 'ERP', 'CRM'],
        'Professional Services': ['Consult', 'Support', 'Manage', 'Monitor', 'Outsource']
    }
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå service_category
    df['service_category'] = 'Others'
    for category, keywords in service_categories.items():
        for keyword in keywords:
            mask = df['‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'].str.contains(keyword, case=False, na=False)
            df.loc[mask, 'service_category'] = category
    
    all_nodes = []
    all_links = []
    node_dict = {}
    node_counter = 0
    
    # Layer 1: Service Categories
    for category in df['service_category'].unique():
        node_dict[category] = node_counter
        all_nodes.append(f"üîπ {category}")
        node_counter += 1
    
    # Layer 2: Services (top 50)
    top_services = df.groupby('‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£')['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (PxQ)'].sum().nlargest(50).index.tolist()
    filtered_df = df[df['‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'].isin(top_services)].copy()
    
    for service in filtered_df['‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'].unique():
        node_name = f"üì¶ {service[:40]}"
        node_dict[node_name] = node_counter
        all_nodes.append(node_name)
        node_counter += 1
    
    # Layer 3: Top Receiver Departments
    top_receivers = filtered_df.groupby('‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£')['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (PxQ)'].sum().nlargest(50).index.tolist()
    for dept in top_receivers:
        node_name = f"üèõÔ∏è {dept[:40]}"
        node_dict[node_name] = node_counter
        all_nodes.append(node_name)
        node_counter += 1
    
    # Links
    # Category ‚Üí Service
    link1 = filtered_df.groupby(['service_category', '‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'])['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (PxQ)'].sum().reset_index()
    for _, row in link1.iterrows():
        all_links.append({
            'source': node_dict[row['service_category']],
            'target': node_dict[f"üì¶ {row['‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'][:40]}"],
            'value': row['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (PxQ)']
        })
    
    # Service ‚Üí Department
    filtered_df = filtered_df[filtered_df['‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'].isin(top_receivers)]
    link2 = filtered_df.groupby(['‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£', '‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'])['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (PxQ)'].sum().reset_index()
    for _, row in link2.iterrows():
        all_links.append({
            'source': node_dict[f"üì¶ {row['‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'][:40]}"],
            'target': node_dict[f"üèõÔ∏è {row['‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'][:40]}"],
            'value': row['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (PxQ)']
        })
    
    # Create figure
    fig = go.Figure(data=[go.Sankey(
        node=dict(
            pad=15,
            thickness=20,
            line=dict(color="black", width=0.5),
            label=all_nodes,
            color=px.colors.qualitative.Vivid * 10,
            hovertemplate='%{label}<br>Total: %{value:,.0f} ‡∏ö‡∏≤‡∏ó<extra></extra>'
        ),
        link=dict(
            source=[link['source'] for link in all_links],
            target=[link['target'] for link in all_links],
            value=[link['value'] for link in all_links],
            color='rgba(0,0,0,0.15)',
            hovertemplate='%{source.label} ‚Üí %{target.label}<br>Value: %{value:,.0f} ‡∏ö‡∏≤‡∏ó<extra></extra>'
        )
    )])
    
    fig.update_layout(
        title="Service Category Analysis",
        font_size=11,
        height=900,
        margin=dict(t=50, l=20, r=20, b=20)
    )
    
    return fig


def create_high_level_sankey(df):
    """
    High Level: ‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡πâ ‚Üí ‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏±‡∏ö
    """
    print("\nüîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á High Level Sankey...")
    
    # ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
    flow_data = df.groupby(['‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£', '‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'])['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (PxQ)'].sum().reset_index()
    flow_data = flow_data.sort_values('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (PxQ)', ascending=False)
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á unique nodes
    providers = flow_data['‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'].unique()
    receivers = flow_data['‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'].unique()
    
    all_nodes = []
    node_dict = {}
    node_counter = 0
    
    # Add provider nodes
    for provider in providers:
        node_name = f"[‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ] {provider}"
        node_dict[provider] = node_counter
        all_nodes.append(node_name)
        node_counter += 1
    
    # Add receiver nodes (avoid duplicates)
    for receiver in receivers:
        if receiver not in providers:
            node_name = f"[‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö] {receiver}"
            node_dict[receiver] = node_counter
            all_nodes.append(node_name)
            node_counter += 1
        else:
            # If it's both provider and receiver, add with different key
            node_dict[f"recv_{receiver}"] = node_counter
            all_nodes.append(f"[‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö] {receiver}")
            node_counter += 1
    
    # Create links
    all_links = []
    for _, row in flow_data.iterrows():
        provider = row['‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£']
        receiver = row['‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£']
        
        # Check if receiver is also a provider
        if receiver in providers:
            target_key = f"recv_{receiver}"
        else:
            target_key = receiver
            
        all_links.append({
            'source': node_dict[provider],
            'target': node_dict[target_key],
            'value': row['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (PxQ)']
        })
    
    # Create colors
    colors = []
    for node in all_nodes:
        if '[‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ]' in node:
            colors.append('#3498db')  # Blue
        else:
            colors.append('#e74c3c')  # Red
    
    # Create figure
    fig = go.Figure(data=[go.Sankey(
        node=dict(
            pad=15,
            thickness=30,
            line=dict(color="black", width=1),
            label=all_nodes,
            color=colors,
            hovertemplate='%{label}<br>Total: %{value:,.0f} ‡∏ö‡∏≤‡∏ó<extra></extra>'
        ),
        link=dict(
            source=[link['source'] for link in all_links],
            target=[link['target'] for link in all_links],
            value=[link['value'] for link in all_links],
            color='rgba(0,0,0,0.2)',
            hovertemplate='%{source.label} ‚Üí %{target.label}<br>Value: %{value:,.0f} ‡∏ö‡∏≤‡∏ó<extra></extra>'
        )
    )])
    
    fig.update_layout(
        title={
            'text': "High Level Flow: ‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ ‚Üí ‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£",
            'x': 0.5,
            'xanchor': 'center'
        },
        font=dict(size=12),
        height=700,
        margin=dict(t=80, l=50, r=50, b=50)
    )
    
    return fig


def create_custom_sankey(df):
    """
    Custom: ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏≠‡∏á
    """
    print("\nüé® Custom Sankey Configuration")
    print("\n‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á (‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö):")
    
    available_cols = [
        '‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£',
        '‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£', 
        '‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£',
        '‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏¢‡πà‡∏≠‡∏¢',
        '‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£',
        '‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'
    ]
    
    print("\n‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ:")
    for i, col in enumerate(available_cols, 1):
        print(f"{i}. {col}")
    
    selected = input("\n‡πÉ‡∏™‡πà‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢ comma ‡πÄ‡∏ä‡πà‡∏ô 2,3,5): ").strip()
    
    if not selected:
        selected = "2,3,5"  # Default
    
    selected_indices = [int(x.strip())-1 for x in selected.split(',')]
    selected_cols = [available_cols[i] for i in selected_indices]
    
    print(f"\n‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: {' ‚Üí '.join(selected_cols)}")
    
    # Ask for top N
    top_n = input("‡πÅ‡∏™‡∏î‡∏á Top ‡∏Å‡∏µ‡πà‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (default=30): ").strip()
    top_n = int(top_n) if top_n else 30
    
    # Create custom sankey based on selection
    return create_dynamic_sankey(df, selected_cols, top_n)


def create_dynamic_sankey(df, columns, top_n=30):
    """
    ‡∏™‡∏£‡πâ‡∏≤‡∏á Sankey ‡πÅ‡∏ö‡∏ö dynamic ‡∏ï‡∏≤‡∏° columns ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    """
    all_nodes = []
    all_links = []
    node_dict = {}
    node_counter = 0
    
    # Process each column
    for i, col in enumerate(columns):
        # Get top values for this column
        if '‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏¢‡πà‡∏≠‡∏¢' in col:
            top_values = df.groupby(col)['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (PxQ)'].sum().nlargest(top_n*2).index.tolist()
        else:
            top_values = df.groupby(col)['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (PxQ)'].sum().nlargest(top_n).index.tolist()
        
        # Add nodes
        for value in top_values:
            node_name = f"[L{i+1}] {str(value)[:40]}"
            if node_name not in node_dict:
                node_dict[node_name] = node_counter
                all_nodes.append(node_name)
                node_counter += 1
    
    # Create links between consecutive columns
    for i in range(len(columns) - 1):
        source_col = columns[i]
        target_col = columns[i + 1]
        
        # Get top values
        source_values = df.groupby(source_col)['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (PxQ)'].sum().nlargest(top_n).index.tolist()
        target_values = df.groupby(target_col)['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (PxQ)'].sum().nlargest(top_n).index.tolist()
        
        # Filter data
        filtered = df[
            (df[source_col].isin(source_values)) & 
            (df[target_col].isin(target_values))
        ]
        
        # Group and create links
        link_data = filtered.groupby([source_col, target_col])['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (PxQ)'].sum().reset_index()
        
        for _, row in link_data.iterrows():
            source_name = f"[L{i+1}] {str(row[source_col])[:40]}"
            target_name = f"[L{i+2}] {str(row[target_col])[:40]}"
            
            if source_name in node_dict and target_name in node_dict:
                all_links.append({
                    'source': node_dict[source_name],
                    'target': node_dict[target_name],
                    'value': row['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (PxQ)']
                })
    
    # Create figure
    fig = go.Figure(data=[go.Sankey(
        node=dict(
            pad=15,
            thickness=20,
            line=dict(color="black", width=0.5),
            label=all_nodes,
            color=px.colors.qualitative.Alphabet * 10,
            hovertemplate='%{label}<br>Total: %{value:,.0f} ‡∏ö‡∏≤‡∏ó<extra></extra>'
        ),
        link=dict(
            source=[link['source'] for link in all_links],
            target=[link['target'] for link in all_links],
            value=[link['value'] for link in all_links],
            hovertemplate='%{source.label} ‚Üí %{target.label}<br>Value: %{value:,.0f} ‡∏ö‡∏≤‡∏ó<extra></extra>'
        )
    )])
    
    fig.update_layout(
        title=f"Custom Sankey: {' ‚Üí '.join(columns)}",
        font_size=11,
        height=800,
        margin=dict(t=50, l=20, r=20, b=20)
    )
    
    return fig


# ==========================================
# Utility Functions
# ==========================================

def analyze_data_structure(excel_file):
    """
    ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    """
    df = pd.read_excel(excel_file)
    
    print("\n" + "=" * 60)
    print("üìä Data Structure Analysis")
    print("=" * 60)
    
    # Basic info
    print(f"\nüìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô:")
    print(f"   - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß: {len(df):,}")
    print(f"   - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå: {len(df.columns)}")
    print(f"   - ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏°: {df['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (PxQ)'].sum():,.0f} ‡∏ö‡∏≤‡∏ó")
    
    # Unique counts
    print(f"\nüî¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Unique Values:")
    for col in df.columns:
        if col not in ['‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢ (P)', '‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ (Q)', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (PxQ)', '‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ô‡∏±‡∏ö']:
            print(f"   - {col}: {df[col].nunique()}")
    
    # Top values by column
    print(f"\nüèÜ Top 3 by Value:")
    for col in ['‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£', '‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£', '‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£', '‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£']:
        top = df.groupby(col)['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (PxQ)'].sum().nlargest(3)
        print(f"\n   {col}:")
        for name, value in top.items():
            print(f"      - {name[:50]}: {value:,.0f} ‡∏ö‡∏≤‡∏ó")
    
    # Recommendations
    print(f"\nüí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:")
    
    if df['‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'].nunique() > 50:
        print("   ‚ö†Ô∏è ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 50 ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó - ‡∏Ñ‡∏ß‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏™‡∏î‡∏á Top N")
    
    if df['‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'].nunique() > 100:
        print("   ‚ö†Ô∏è ‡∏ù‡πà‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 100 ‡∏ù‡πà‡∏≤‡∏¢ - ‡∏Ñ‡∏ß‡∏£‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Top 50")
    
    if len(df) > 2000:
        print("   ‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏µ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 2000 ‡πÅ‡∏ñ‡∏ß - ‡∏Ñ‡∏ß‡∏£‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•")
    
    print("\n   ‚úÖ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏ä‡πâ Option 2: Department Focus")
    print("   ‚úÖ ‡∏´‡∏£‡∏∑‡∏≠ Option 4: High Level ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°")
    

# ==========================================
# Main Execution
# ==========================================

if __name__ == "__main__":
    import sys
    
    try:
        import plotly
    except ImportError:
        print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á plotly ‡∏Å‡πà‡∏≠‡∏ô:")
        print("   pip install plotly pandas openpyxl")
        sys.exit(1)
    
    if len(sys.argv) > 1:
        excel_file = sys.argv[1]
        
        if not Path(excel_file).exists():
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå: {excel_file}")
            sys.exit(1)
        
        # Analyze data first
        analyze = input("\nüìä ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏°? (y/N): ").strip().lower()
        if analyze == 'y':
            analyze_data_structure(excel_file)
            input("\n‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠...")
        
        # Create sankey
        create_multilayer_sankey(excel_file)
    else:
        print("\nüìå ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:")
        print("   python script.py your_excel_file.xlsx")
        print("\nüí° Features:")
        print("   - Multi-layer Sankey (5 ‡∏£‡∏∞‡∏î‡∏±‡∏ö)")
        print("   - Department Focus View") 
        print("   - Service Category Analysis")
        print("   - High Level Overview")
        print("   - Custom Configuration")